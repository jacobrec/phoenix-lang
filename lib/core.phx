###### Core Library
# This is compiled in with every code

#### Utilities
# between is inclusive
defn between a b c = a <= b && b <= c ;;
defn betweenx a b c = a < b && b < c ;;

defn foreach f x =
       if string?(x) then foreach_string(f, x)
  else if list?(x)   then foreach_list(f, x)
  else println("foreach not defined for this type")
;;

# Easier printing
defn printl list =
  if length(list) == 0 then println("")
  else (print(car(list)); printl(cdr(list)))
;;

#### Looping constructs
defn dotimes f n =
  if n <= 0 then [] else (f(); dotimes(f, n - 1))
;;

#### Char functions
defn char_number? c =
  char?(c) && ('0' <= c && c <= '9') # 48->0 57->9
;;

#### String functions
defn map_string f s =
  if length(s) > 0 then (
    f(@(s, 0)) +  map_string(f, substring(s, 1))
  ) else ""
;;

defn foreach_string f s =
  if length(s) > 0 then (
    f(@(s, 0));
    foreach_string(f, substring(s, 1))
  ) else []
;;

#### File functions
defn write_string! out str =
  foreach(fn x = writechar!(out, x), str)
;;

#### List functions
defn map f l =
  if l then (f(car(l)) :: map(f, cdr(l))) else l
;;

defn foreach_list f l =
  if l then (f(car(l)); foreach_list(f, cdr(l))) else l
;;


defn reverse l =
  (defn accer acc l =
    if l then accer(car(l) :: acc, cdr(l))
    else acc);
  accer([], l)
;;

defn array_of_list_rev l =
  if l then push!(array_of_list_rev(cdr(l)), car(l)) else [||]
;;

defn array_of_list l =
  array_of_list_rev(reverse(l))
;;

