* Phoenix
  An attempt at making a language that is fully self hosted.

** Step 1 - Interpreter
   - Write simply with an emphasis on error handling
   - No long stack traces from host language
   - Interpreter in ocaml with menhir

** Step 2 - Self hosted Compiler
   - Target x86 machine code.
   - Multipass compiler
   - Lift lambdas and convert closures
   - Generate machine code

** Types
   - Symbols        :: =:hello=
   - Strings        :: ="I even have escape sequences\n"=
   - Dynamic Arrays :: =[1, 2, 3]=
   - Linked Lists   :: =<1, 2, 3>=
   - Hashmaps       :: ={:a, 1; :b, 2}=
   - Closures       :: =fn x = 3 + x=
   - Functions      :: =defn name x = 3 + x=
   - Integers       :: =49=
   - Chars          :: ='a'=

1 + if (true) 2 else 3 + 4 :: should this be 7 or 3?

** Unary Operators (in precedence order)
   - =()=         :: function call, and expression grouping
   - =-=          :: negate
   - =!=          :: not

** Binary Operators (in precedence order)
   - =+, -=       :: plus, minus
   - =*, /, %=    :: times, divide, and mod
   - ~<, >~       :: comparisions
   - ~==, >=, <=~ :: equalities
   - =::=         :: cons
   - ~:=~         :: assignment
   - =;, :=       :: evaluates two expressions and returns the (semi ? second : first)

** Expression Types
   - if      :: =if (EXPR) EXPR else EXPR=
   - def     :: =def NAME = EXPR=
   - binop   :: =EXPR OP EXPR=
   - uniop   :: =OP EXPR= or =EXPR OP=
   - literal :: =LITERAL=

** Statement Types
   - ExprStmt :: =EXPR=
   - DefnStmt :: =defn NAME NAME* = EXPR=


** Example Code
   #+BEGIN_SRC
   defn fib n = if (n < 2) n else fib(n-1) + fib(n-2)
   defn fib n = if n < 2 then n else fib(n-1) + fib(n-2) end
   def val = fib(10) also println("hi")
   defn main =
     println("Starting program");
     def offset = 1;
     foreach(
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       fn i = println(fib(offset + i))
     );
     println("Ending program")
   println(val)
   #+END_SRC

