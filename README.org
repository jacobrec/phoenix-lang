* Phoenix
  An attempt at making a language that is fully self hosted.

** Step 1 - Interpreter
   - Write simply with an emphasis on error handling
   - No long stack traces from host language
   - Interpreter in ocaml with menhir

** Step 2 - Self hosted Compiler
   - Target x86 machine code.
   - Multipass compiler
   - Lift lambdas and convert closures
   - Generate machine code

** Types
   - Symbols        :: =:hello=
   - Strings        :: ="I even have escape sequences\n"=
   - Dynamic Arrays :: =[|1, 2, 3|]=
   - Linked Lists   :: =[1, 2, 3]=
   - Hashmaps       :: ={:a => 1, :b => 2}=
   - Files          :: =open("filepath.txt", "r")=
   - Closures       :: =fn x = 3 + x=
   - Functions      :: =defn name x = 3 + x=
   - Integers       :: =49=
   - Chars          :: ='a'=
   - Bool           :: =false=

** Unary Operators (in precedence order)
   - =()=         :: function call, and expression grouping
   - =-=          :: negate
   - =!=          :: not

** Binary Operators (in precedence order)
   - =*, /, %=    :: times, divide, and mod
   - =+, -=       :: plus, minus
   - =::=         :: cons
   - ~<, >~       :: comparisions
   - ~==, >=, <=~ :: equalities
   - ~&&, ||~     :: logicals
   - ~:=~         :: assignment
   - =;, :=       :: evaluates two expressions and returns the (semi ? second : first)

** Expression Types
   - if      :: =if (EXPR) EXPR else EXPR=
   - def     :: =def NAME = EXPR=
   - binop   :: =EXPR OP EXPR=
   - uniop   :: =OP EXPR= or =EXPR OP=
   - literal :: =LITERAL=

** Statement Types
   - ExprStmt :: =EXPR=
   - DefnStmt :: =defn NAME NAME* = EXPR=
     
** Builtin Functions
   The goal is to have a minimal set of builtins on which anything can
   be built on top of. Mainly primatives for each type.
*** Integers
    - Number literals :: =958=
    - Arithmatic :: =+, -, *, /, %=
    - Comparisons :: ~<, >, <=, >=, ==~
*** Symbols
    - Symbol literals :: =:symbol=
    - Comparison :: ~==~
*** Strings
    - String Literals :: ="Hello, World!\n"=
    - Alphabetic Comparisons :: ~<, >, <=, >=, ==~
    - Concatenation :: =+=
    - String Operators :: =substring, subprefix, length, @, set@=
*** Dynamic arrays
    - Array literals :: =[|1, 2, 3|]=
    - Array Operators :: =length, @, set@!, set@, push!, pop!, +=
*** Linked list
    - List literals :: =[1, 2, [], 4]=
    - cons :: =::=
    - car, cdr :: =car, cdr=
    - concat :: =+=
*** Hashmaps
    - Hash literals :: ={:a => "1", :b => "2"}=
    - Hash Operators :: =insert!, has, get, remove!, length=
*** Files
    - File operators :: =open, close, readchar, writechar=
*** Functions
    - Function operators :: =apply=
*** Chars
    - Char operators :: =chr, ord=
    - Concatenation :: =+=
*** Bool
    - negation :: =!=

** Example Code
   #+BEGIN_SRC
   defn fib n = if n < 2 then n else fib(n-1) + fib(n-2) ;;
   def val = fib(10) : println("hi") ;;
   defn main =
     println("Starting program");
     def offset = 1;
     foreach(
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       fn i = println(fib(offset + i))
     );
     println("Ending program")
   ;;
   println(val)
   #+END_SRC

